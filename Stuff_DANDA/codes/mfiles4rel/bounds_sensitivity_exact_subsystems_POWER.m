function [lb_u, ub_u, lb_d, ub_d] = bounds_sensitivity_exact_subsystems_POWER()


%%POWER

% * x: Design parameters:
%       * x(1) = type of solar cell
%               Si = [0 0.33], GaAs28 = [0.33 0.66], GaAs30 = [0.66 1] 
%       * x(2) = required bus voltage, V [0,100]
%       * x(3) = eps configuration (det, mppt) [0,0.5) = det; [0.5,1] = mppt    
%              eps: electric power system, der: direct energy transfer, mppt: maximum point power tracking
%              (it is how the solar cells are connected to the battery, det=directly; mppt=using an interface that optimises the performance)
%       * x(4) = cell packing efficiency (or assembly factor) [0,1]
%       * x(5) = depth of discharge (it is how much the battery has been discharged) [0,1]
%       * x(6) = number of loads (to determine LCLs in PCDU) [1,50]
%              PCDU(Power Control and Distribution Unit):controls the power flow from the solar generator to the battery and distributes power, on command from the onboard computer, to the instruments, the heaters and the propulsion system
%              LCL(Latching Current Limiters)
%       * x(7) = harness mass factor (as a percentage of eps mass) (harness=cables and buses)
%       * x(8) = allowable voltage drop, %
%
% * ep: Environmental parameters:
%       * ep(1) = required daylight power, W
%       * ep(2) = required eclipse power, W
%       * ep(3) = orbital daylight time, h
%       * ep(4) = orbital eclipse time, h
%       * ep(5) = distance from Sun, AU
%       * ep(6) = worst case angle of incidence, deg
%       * ep(7) = uncertainty on array temperature, C
%       * ep(8) = satellite lifetime, yrs
%       * ep(9) = bus regulation (0: unregulated, 1: regulated)
%       * ep(10) = uncertainty on power requirements, %
%       * ep(11) = total radiation fluence
%       * ep(12) = s/c type (1: cubesat, 0: big one)






lb_d = [0.7 ...
       0.15 ...
       3 ...
       0.025 ...
       3.5 ...
       0 ...
       0 ...
       1 ...
       ];     

ub_d = [0.8 ...
       0.3 ...
       5 ...
       0.0375 ...
       4 ...
       5 ...
       5 ...
       3 ...
       ];

     
lb_u = [0 ...
       0 ...
       0.1 ...
       0.1 ...
       0.8 ...
       3 ...
       0.1 ...
       1 ...
       1 ...
       0.8 ...
       0.8 ...
       1];    

ub_u = [100 ...
       100 ...
       2 ...
       2 ...
       1 ...
       7 ...
       0.3 ...
       1.5 ...
       1 ...
       0.9 ...
       1.2 ...
       1];

   


   
   
return
function [ARCHIVE, ARCHIVE_normalised] = archive_archive_normalised(ARCHIVE, ARCHIVE_normalised, problem_max_u, map_info, ...
                                                                    umax_constraint, dmin_true, umax_true, f_inner, violation_u_kk, ...
                                                                    f_inner_constraint, nfeval, dmin, umax, obj)



if ~isempty(problem_max_u.constraint) || problem_max_u.par_objfun.obj_constr
    
    umax_constraint_true = map_affine(umax_constraint, map_info);
    %                             d = dmin.*(problem_minmax.ub_d'-problem_minmax.lb_d') + (problem_minmax.lb_d');
    %                             map_info = problem_max_u.par_objfun.map_u_info{obj};
    %                             u = map_affine(umax, map_info);
    %                             violation = problem_minmax.constraints{obj}(d, u, problem_max_u.par_objfun.problem_par_objfun{obj});
    
    ARCHIVE{obj}  = [ARCHIVE{obj}; ...
        [{dmin_true} ...
        {umax_true} ...
        {umax_constraint_true} ...
        {f_inner} ...
        {violation_u_kk} ...
        {f_inner_constraint} ...
        nfeval]];
    
    
    ARCHIVE_normalised{obj}  = [ARCHIVE_normalised{obj}; ...
        [{dmin} ...
        {umax} ...
        {umax_constraint} ...
        {f_inner} ...
        {violation_u_kk} ...
        {f_inner_constraint} ...
        nfeval]];
    
    %                             ARCHIVE_C{obj} = [ARCHIVE_C{obj}; {dmin_true} {umax_constraint_true} f_inner_constraint];
    
    
else
    ARCHIVE{obj}  = [ARCHIVE{obj}; ...
        [{dmin_true} ...
        {umax_true} ...
        0 ...
        {f_inner} ...
        0 ...
        0 ...
        nfeval]];
    
    ARCHIVE_normalised{obj}  = [ARCHIVE_normalised{obj}; ...
        [{dmin} ...
        {umax} ...
        0 ...
        {f_inner} ...
        0 ...
        0 ...
        nfeval]];
    
end

end
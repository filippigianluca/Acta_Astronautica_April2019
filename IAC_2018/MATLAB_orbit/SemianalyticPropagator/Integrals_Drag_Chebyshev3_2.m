function [IDrag1, IDrag2, IDrag4, IDrag5, IDrag6] = Integrals_Drag_Chebyshev3_2(e, theta0, theta)


% Input: e -> eccentricity
%        theta0 -> initial value of the angle for the integrals, [rad]
%        theta -> vector of final values of the angles for the integrals
%                 [rad]

% Output: Idrag1 -> matrix with 8 rows and a number of column equal to length(theta)
%                   First row contains the results of Idrag11, 2nd row the
%                   results of IDrag12, 3rd row the results of IDrag13 and
%                   so on.
%                   1st column contain the result of the integral between
%                   theta0 and theta(1), 2nd column contains the result of
%                   the integral between theta(1) and theta(2), 3rd coulmn
%                   contain the result of the integral between theta(2) and
%                   theta(3) and so on....
%                   The rows are 8 because the integrals derive from an
%                   expansion up to order 7.
%         IDrag2 ->
%         IDrag4 ->
%         IDrag5 ->
%         IDrag6 ->

% To save in computation time only one call to lellipe3 and lellipf3 is done,
% for both the possible elliptic integrals (see equations).
% To do that the file ellipe3.m and lellipf3.m had to be
% modified in order to allow for the contemporary computation of the
% elliptic integrals of different angles with different modulus.

% Analytical solution of the integral is correct for initial and final
% values of the angle between 0 and 2*pi. For all the other cases go back
% to the interval 0 - 2*pi. 

% What is the difference with respect to version 3_1? Now also
% negative angles are taken into account.

% Marilena Di Carlo, 2015

%% Initialization

% Number of elements in theta
n = length(theta);

% Compute vector of initial angles
theta0_2 = [theta0 theta(1,1:end-1)];




if e ~= 0
    
    % The analytical expression is not correct if initial and final angles are
    % not in the interval 0 to 2*pi. Here we are assuming that angles can be
    % also negative and we are looking at the cases when this angles are
    % greater than 2*pi or lower than 0
    
    % ---------------------------------------------------------------------
    % theta
    % ---------------------------------------------------------------------
    % Angles greater than 2*pi
    [~,col] = find(theta > 2*pi);
    
    % Angles lower than 0
    [~,col2] = find(theta < 0);

    % Collect the column index for angles theta outside the range 0 to 2*pi
    col = [col col2];
    
    % Angles that need to be corrected
    value = theta(col);


    
    % ---------------------------------------------------------------------
    % theta0_2
    % ---------------------------------------------------------------------
    [~,col0] = find(theta0_2 > 2*pi);
    [~,col02] = find(theta0_2 < 0);
    col0 = [col0 col02];
    value0= theta0_2(col0);


    % ---------------------------------------------------------------------
    % Initialize variables for correction
    % ---------------------------------------------------------------------
    % Two possible correction can be mode, according to the situation.
    % Variable for the correction of the integral from 0 to 2*pi. This is 1
    % when correction is applied.
    n_corr_2pi       = zeros(1,n);
    
    % Variable for the correction of the integral from 0 to mod(theta,2*pi).
    % This is zero when correction is applied.
    n_corr_0modtheta = ones(1,n);

    
    % ---------------------------------------------------------------------
    % If both angles are in the range [0, 2*pi], do nothing
    % ---------------------------------------------------------------------
    if isempty(value) == 1  && isempty(value0) == 1
        
    % ---------------------------------------------------------------------
    % Either theta or theta0 have values outside the range [0, 2*pi]
    % ---------------------------------------------------------------------
    else
        
        % Combine columns index outisde the range for both theta0 and theta
        % and then remove duplicate elements using unique. Solve the
        % problems for every couple theta0-theta
        column = unique([col, col0]);
        
        for k = 1 : length(column)
        % QUESTI IF DEVONO ESSERE RIODINATI E RIDOTTI!!!! 


            % If theta and theta0_2 are lower than zero, add 2*pi until
            % they are both positive
            while theta(1,column(k)) < 0 || theta0_2(1,column(k)) < 0
                theta(1,column(k))  = theta(1,column(k))  + 2*pi;
                theta0_2(1,column(k))  = theta0_2(1,column(k))  + 2*pi;
            end

            % If now the two angles are both positive, and also inside the
            % range [0, 2*pi], do nothing but go to the next case
            if ( theta(1,column(k)) >= 0 && (theta(1,column(k)) - 2*pi) <= 1e-10 ) && ...
                ( theta0_2(1,column(k)) >= 0 && theta0_2(1,column(k)) <= 2*pi )           
                continue
            else

            % 1ST CASE:
            % Example: 0 ----> 2*pi == theta0 -----> theta ------> 4*pi
            % or:      0 ----> 2*pi -----------------------------> 4*pi == theta0 -----> theta -----> 6*pi
            
            % 1ST CASE, SITUATION 1b
            % Example: 0 ----> 2*pi -----> theta0 ------> 4*pi == theta
            
            % 4TH CASE
            % Example: 0 ----> 2*pi ----> theta0  -----> theta ------> 4*pi
                
            if  ( mod(theta0_2(1,column(k)), 2*pi) == 0  &&  (theta(1,column(k)) - theta0_2(1,column(k))) < (2*pi) ) || ...
                ( mod(theta(1,column(k)), 2*pi) == 0  &&  (theta(1,column(k)) - theta0_2(1,column(k))) < (2*pi) ) || ...
                ( theta(1,column(k)) > 2*pi && theta0_2(1,column(k)) > 2*pi    && fix(theta0_2(1,column(k))/(2*pi)) == fix(theta(1,column(k))/(2*pi)) )

                % Integrate from mod(theta0_2,2*pi) to mod(theta,2*pi)
                theta(1,column(k))    = mod(theta(1,column(k)),2*pi);
                theta0_2(1,column(k)) = mod(theta0_2(1,column(k)),2*pi);

            % 2ND CASE
            % Example: 0 ----> 2*pi == theta0  ------> 4*pi -----> theta
            elseif mod(theta0_2(1,column(k)), 2*pi) == 0  &&  (theta(1,column(k)) - theta0_2(1,column(k))) > (2*pi)
                
                % Integrate from 0 to mod(theta,2*pi) and then add integral
                n_corr_2pi(1,column(k)) = fix(( theta(1,column(k)) - theta0_2(1,column(k)) ) / (2*pi)) ;
                theta(1,column(k)) = mod(theta(1,column(k)),2*pi);
                theta0_2(1,column(k)) = 0;

            % 3RD CASE
            % Example: 0 ----> 2*pi ----> theta0  ------> 4*pi -----> theta
            % or also
            % Example: 0 ----> 2*pi ----> theta0  ------> 4*pi -----> 6*pi ----------> theta
            elseif theta(1,column(k)) > 2*pi && mod(theta0_2(1,column(k)),2*pi) < 2*pi   &&  fix(theta0_2(1,column(k))/(2*pi)) ~= fix(theta(1,column(k))/(2*pi))

                % Integrate from theta0_2 to 2*pi and then from 0 to mod(theta)
                n_corr_0modtheta(1,column(k)) = 0;
                n_corr_2pi(1,column(k)) = fix(theta(1,column(k))/(2*pi)) - fix(theta0_2(1,column(k))/(2*pi))  - 1; 
                theta(1,column(k))    = mod(theta(1,column(k)),2*pi);
                theta0_2(1,column(k)) = mod(theta0_2(1,column(k)),2*pi);              

            end
            
            end

        end
        
    end
    

    
    %% Elliptic Integrals
    % =========================================================================
    % Elliptic Integrals with:
    % - argument equal to asin(cos(theta/2)) and theta/2
    % - modulus equal to -4*e/(1-e)^2 and 4*e/(1+e)^2
    % - n = (2e/(e-1)) and n = (2e/(1+e)) for EllipticPi
    % =========================================================================
    
    % Error for the computation of the elliptic integrals
    errtol = 1e-8;
    
    % Arguments and modulus (all in the same vector)
    arguments = [asin(cos(0/2)) asin(cos(theta0_2/2)) asin(cos(theta/2)) asin(cos(2*pi/2)) ...
                          0/2            theta0_2/2            theta/2            2*pi/2];
    modules   = [-4*e/(1-e)^2 * ones(1,2*n+2) ...
                  4*e/(1+e)^2 * ones(1,2*n+2)];
              
    nn = [2*e/(e-1) * ones(1,2*n+2) ...
         2*e/(1+e) * ones(1,2*n+2)];
    
    % EllipticF and EllipticE
    ElliEtmp = lellipe3_mod(arguments,modules, errtol);
    ElliFtmp = lellipf3_mod(arguments,modules, errtol);
    
    % Case A: argument equal to asin(cos(theta/2)) and modulus equal to -4*e/(1-e)^2
    ElliE = ElliEtmp(1,n+2:2*n+1) - ElliEtmp(1,2:n+1);
    ElliF = ElliFtmp(1,n+2:2*n+1) - ElliFtmp(1,2:n+1);
    
    % Case B: argument equal to theta/2 and modulus equal to 4*e/(1+e)^2
    ElliE2 = ElliEtmp(1,3*n+4:4*n+3) - ElliEtmp(1,2*n+4:3*n+3);
    ElliF2 = ElliFtmp(1,3*n+4:4*n+3) - ElliFtmp(1,2*n+4:3*n+3);
    
    % Integral from 0 to 2*pi - Case A
    ElliE_0To2Pi = ElliEtmp(1,2*n+2) - ElliEtmp(1,1);
    ElliF_0To2Pi = ElliFtmp(1,2*n+2) - ElliFtmp(1,1);
    
    % Integral from 0 to 2*pi - Case B
    ElliE2_0To2Pi = ElliEtmp(1,end) - ElliEtmp(1,2*n+3);
    ElliF2_0To2Pi = ElliFtmp(1,end) - ElliFtmp(1,2*n+3);
    
    % Integral from mod(theta0_2, 2*pi) to 2*pi  - Case A
    ElliE_modTheta0To2Pi = ElliEtmp(1,2*n+2) - ElliEtmp(1,2:1+n);
    ElliF_modTheta0To2Pi = ElliFtmp(1,2*n+2) - ElliFtmp(1,2:1+n);
    
    % Integral from mod(theta0_2, 2*pi) to 2*pi  - Case B
    ElliE2_modTheta0To2Pi = ElliEtmp(1,end) - ElliEtmp(1,2*n+4:3*n+3);
    ElliF2_modTheta0To2Pi = ElliFtmp(1,end) - ElliFtmp(1,2*n+4:3*n+3);
    
    % Integral from 0 to mod(theta,2*pi)  - Case A
    ElliE_0ToModTheta = ElliEtmp(1,n+2:2*n+1) - ElliEtmp(1,1);
    ElliF_0ToModTheta = ElliFtmp(1,n+2:2*n+1) - ElliFtmp(1,1);
    
    % Integral from 0 to mod(theta,2*pi)  - Case B
    ElliE2_0ToModTheta = ElliEtmp(1,3*n+4:4*n+3) - ElliEtmp(1,2*n+3);
    ElliF2_0ToModTheta = ElliFtmp(1,3*n+4:4*n+3) - ElliFtmp(1,2*n+3);
    
    
    % Discontinuity is present in EllipticPi - use the formula dependent
    % upon the logarighm only if we are not in the disconinuity case - see
    % reference for more details
    % INDAGARE MEGLIO
    % CAN THIS HAPPEN ALSO FOR EllipticPi2?
%     keyboard
    if any( abs( ( sqrt(1 + e^2 + 2 * e * cos(theta) ) .* tan(theta./2)   + (1+e) ) .* ( (1-e) * tan(theta./2) -  sqrt(1+e^2 + 2 * e * cos(theta) )) ) < 1e-14 ) && ...
       any( abs( ( sqrt(1 + e^2 + 2 * e * cos(theta) ) .* tan(theta./2)   - (1+e) ) .* ( (1-e) * tan(theta./2) +  sqrt(1+e^2 + 2 * e * cos(theta) )) ) < 1e-14 )
        
        EllipticPitmp  = ellipticPi(nn,arguments,modules);
        EllipticPi     = EllipticPitmp(1,n+2:2*n+1) - EllipticPitmp(1,2:n+1);
        EllipticPi_0To2Pi = EllipticPitmp(1,2*n+2) - EllipticPitmp(1,1);
        EllipticPi_modTheta0To2Pi = EllipticPitmp(1,2*n+2) - EllipticPitmp(1,2:1+n);
        EllipticPi_0ToModTheta = EllipticPitmp(1,n+2:2*n+1) - EllipticPitmp(1,1);
        
    else
        
        % EllipticPi(theta(i+1)) - EllipticPi(theta(i))
        % EllipticPi can be expressed as function of EllipticF and a logarithmic
        % term.
        % 1st case: argument equal to asin(cos(theta/2)), modulus equal to -4*e/(1-e)^2
        % and n = (2e/(e-1))
        EllipticPi =     1 /(1+e)*   ElliF  + ...
                        +  0.25 * (1-e)/(1+e) * (...
                        log( ( ( sqrt(1 + e^2 + 2 * e * cos(theta) ) .* tan(theta./2)   + (1+e) ) .* ( (1-e) * tan(theta./2) -  sqrt(1+e^2 + 2 * e * cos(theta) )) )  ./ ...
                        ( ( sqrt(1 + e^2 + 2 * e * cos(theta) ) .* tan(theta./2)   - (1+e) ) .* ( (1-e) * tan(theta./2) +  sqrt(1+e^2 + 2 * e * cos(theta) )) ) ) - ...
                        log( ( ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) ) .* tan(theta0_2./2) + (1+e) ) .* ( (1-e) * tan(theta0_2./2) - sqrt(1+e^2 + 2 * e * cos(theta0_2) )) )  ./ ...
                        ( ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) ) .* tan(theta0_2./2) - (1+e) ) .* ( (1-e) * tan(theta0_2./2) + sqrt(1+e^2 + 2 * e * cos(theta0_2) ))  ) ) ) ;
        
        
        % Integral from 0 to 2*pi - Case A
        EllipticPi_0To2Pi =     1 /(1+e)*   ElliF_0To2Pi  + ...
                                +  0.25 * (1-e)/(1+e) * (...
                                log( ( ( sqrt(1 + e^2 + 2 * e * cos(2*pi) ) .* tan(2*pi./2)   + (1+e) ) .* ( (1-e) * tan(2*pi./2) -  sqrt(1+e^2 + 2 * e * cos(2*pi) )) )  ./ ...
                                ( ( sqrt(1 + e^2 + 2 * e * cos(2*pi) ) .* tan(2*pi./2)   - (1+e) ) .* ( (1-e) * tan(2*pi./2) +  sqrt(1+e^2 + 2 * e * cos(2*pi) )) ) ) - ...
                                log( ( ( sqrt(1 + e^2 + 2 * e * cos(0) ) .* tan(0) + (1+e) ) .* ( (1-e) * tan(0) - sqrt(1+e^2 + 2 * e * cos(0) )) )  ./ ...
                                ( ( sqrt(1 + e^2 + 2 * e * cos(0) ) .* tan(0) - (1+e) ) .* ( (1-e) * tan(0) + sqrt(1+e^2 + 2 * e * cos(0) ))  ) ) ) ;
        
        % Integral from mod(theta0_2, 2*pi) to 2*pi  - Case A
        EllipticPi_modTheta0To2Pi =  1 /(1+e)*   ElliF_modTheta0To2Pi  + ...
                                    +  0.25 * (1-e)/(1+e) * (...
                                    log( ( ( sqrt(1 + e^2 + 2 * e * cos(2*pi) ) .* tan(2*pi./2)   + (1+e) ) .* ( (1-e) * tan(2*pi./2) -  sqrt(1+e^2 + 2 * e * cos(2*pi) )) )  ./ ...
                                    ( ( sqrt(1 + e^2 + 2 * e * cos(2*pi) ) .* tan(2*pi./2)   - (1+e) ) .* ( (1-e) * tan(2*pi./2) +  sqrt(1+e^2 + 2 * e * cos(2*pi) )) ) ) - ...
                                    log( ( ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) ) .* tan(theta0_2./2) + (1+e) ) .* ( (1-e) * tan(theta0_2./2) - sqrt(1+e^2 + 2 * e * cos(theta0_2) )) )  ./ ...
                                    ( ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) ) .* tan(theta0_2./2) - (1+e) ) .* ( (1-e) * tan(theta0_2./2) + sqrt(1+e^2 + 2 * e * cos(theta0_2) ))  ) ) ) ;
        
        
        EllipticPi_0ToModTheta       =  1 /(1+e)*   ElliF_0ToModTheta  + ...
                                    +  0.25 * (1-e)/(1+e) * (...
                                    log( ( ( sqrt(1 + e^2 + 2 * e * cos(theta) ) .* tan(theta./2)   + (1+e) ) .* ( (1-e) * tan(theta./2) -  sqrt(1+e^2 + 2 * e * cos(theta) )) )  ./ ...
                                    ( ( sqrt(1 + e^2 + 2 * e * cos(theta) ) .* tan(theta./2)   - (1+e) ) .* ( (1-e) * tan(theta./2) +  sqrt(1+e^2 + 2 * e * cos(theta) )) ) ) - ...
                                    log( ( ( sqrt(1 + e^2 + 2 * e * cos(0) ) .* tan(0) + (1+e) ) .* ( (1-e) * tan(0) - sqrt(1+e^2 + 2 * e * cos(0) )) )  ./ ...
                                    ( ( sqrt(1 + e^2 + 2 * e * cos(0) ) .* tan(0) - (1+e) ) .* ( (1-e) * tan(0) + sqrt(1+e^2 + 2 * e * cos(0) ))  ) ) ) ;
        
    end
    % 2nd case: argument equal to theta/2, modulus equal to 4*e/(1+e)^2 and n = (2e/(1+e))
    EllipticPi2 =     1 /(1-e)*   ElliF2  + ...
                        +  0.25 * (1+e)/(1-e) * (...
                        log( ( sqrt(1 + e^2 + 2 * e * cos(theta) )  - e * sin(theta) )  ./ ...
                        ( sqrt(1 + e^2 + 2 * e * cos(theta) )  + e * sin(theta) ) ) - ...
                        log( ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) )  - e * sin(theta0_2) )  ./ ...
                        ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) )  + e * sin(theta0_2) ) )  ) ;
    
    
    
    % Integral from 0 to 2*pi - Case B
    EllipticPi2_0To2Pi =     1 /(1-e)*   ElliF2_0To2Pi  + ...
                            +  0.25 * (1+e)/(1-e) * (...
                            log( ( sqrt(1 + e^2 + 2 * e * cos(2*pi) )  - e * sin(2*pi) )  ./ ...
                            ( sqrt(1 + e^2 + 2 * e * cos(2*pi) )  + e * sin(2*pi) ) ) - ...
                            log( ( sqrt(1 + e^2 + 2 * e * cos(0) )  - e * sin(0) )  ./ ...
                            ( sqrt(1 + e^2 + 2 * e * cos(0) )  + e * sin(0) ) )  ) ;
    
   
    
    % Integral from mod(theta0_2, 2*pi) to 2*pi  - Case B
    EllipticPi2_modTheta0To2Pi =  1 /(1-e)*   ElliF2_modTheta0To2Pi  + ...
                                +  0.25 * (1+e)/(1-e) * (...
                                log( ( sqrt(1 + e^2 + 2 * e * cos(2*pi) )  - e * sin(2*pi) )  ./ ...
                                ( sqrt(1 + e^2 + 2 * e * cos(2*pi) )  + e * sin(2*pi) ) ) - ...
                                log( ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) )  - e * sin(theta0_2) )  ./ ...
                                ( sqrt(1 + e^2 + 2 * e * cos(theta0_2) )  + e * sin(theta0_2) ) )  ) ;
    
    
    
    
    EllipticPi2_0ToModTheta       =  1 /(1-e)*   ElliF2_0ToModTheta  + ...
                                +  0.25 * (1+e)/(1-e) * (...
                                log( ( sqrt(1 + e^2 + 2 * e * cos(theta) )  - e * sin(theta) )  ./ ...
                                ( sqrt(1 + e^2 + 2 * e * cos(theta) )  + e * sin(theta) ) ) - ...
                                log( ( sqrt(1 + e^2 + 2 * e * cos(0) )  - e * sin(0) )  ./ ...
                                ( sqrt(1 + e^2 + 2 * e * cos(0) )  + e * sin(0) ) )  ) ;
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % Final elliptic integrals
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    ElliE       = n_corr_0modtheta .* ElliE       + n_corr_2pi .* ElliE_0To2Pi         + (1-n_corr_0modtheta) .* ElliE_modTheta0To2Pi       + (1-n_corr_0modtheta) .* ElliE_0ToModTheta ;
    ElliF       = n_corr_0modtheta .* ElliF       + n_corr_2pi .* ElliF_0To2Pi         + (1-n_corr_0modtheta) .* ElliF_modTheta0To2Pi       + (1-n_corr_0modtheta) .* ElliF_0ToModTheta;
    ElliE2      = n_corr_0modtheta .* ElliE2      + n_corr_2pi .* ElliE2_0To2Pi        + (1-n_corr_0modtheta) .* ElliE2_modTheta0To2Pi      + (1-n_corr_0modtheta) .* ElliE2_0ToModTheta;
    ElliF2      = n_corr_0modtheta .* ElliF2      + n_corr_2pi .* ElliF2_0To2Pi        + (1-n_corr_0modtheta) .* ElliF2_modTheta0To2Pi      + (1-n_corr_0modtheta) .* ElliF2_0ToModTheta;
    EllipticPi  = n_corr_0modtheta .* EllipticPi  + n_corr_2pi .* EllipticPi_0To2Pi    + (1-n_corr_0modtheta) .* EllipticPi_modTheta0To2Pi  + (1-n_corr_0modtheta) .* EllipticPi_0ToModTheta;
    EllipticPi2 = n_corr_0modtheta .* EllipticPi2 + n_corr_2pi .* EllipticPi2_0To2Pi   + (1-n_corr_0modtheta) .* EllipticPi2_modTheta0To2Pi + (1-n_corr_0modtheta) .* EllipticPi2_0ToModTheta;
    
    
    
    
    %% Idrag1
    
    % =========================================================================
    % Idrag10
    % =========================================================================
    IDrag1(1,:) = (3+e^2) / ( e^2 * (1+e) ) * ElliF2 + ...
        -3 * (1+e) / e^2 * ElliE2 + ...
        (1/e^2) * log ( (sqrt(1 + e^2 + 2*e*cos(theta)) + e*sin(theta)) ./ (sqrt(1 + e^2 + 2*e*cos(theta)) - e*sin(theta)) ) - ...
        ((1/e^2) * log ( (sqrt(1 + e^2 + 2*e*cos(theta0_2)) + e*sin(theta0_2)) ./ (sqrt(1 + e^2 + 2*e*cos(theta0_2)) - e*sin(theta0_2)) ))  + ...
        sqrt(1 + e^2 + 2*e*cos(theta)) .* sin(theta) ./ (e * (1+e*cos(theta))) -...
        ( sqrt(1 + e^2 + 2*e*cos(theta0_2)) .* sin(theta0_2) ./ (e * (1+e*cos(theta0_2))) ) ;
    
    % =========================================================================
    % Idrag11
    % =========================================================================
    
    IDrag1(2,:) = - 1 ./ (e^2 * (1-e^2) ) .* ...
        (   (1-e)*ElliE   + ...
        -2 * (1+e) * ElliF + ...
        + (1+e)^2 *   EllipticPi  ) + ...
        - sin(theta)  .* ( 1+e^2+2*e*cos(theta) ).^(3/2)  ./ ( 2 * e * (1-e^2) * (1+e*cos(theta)).^2 ) + ...
        sin(theta0_2) .* ( 1+e^2+2*e*cos(theta0_2) ).^(3/2) ./ ( 2 * e * (1-e^2) * (1+e*cos(theta0_2)).^2) ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag12
    % =========================================================================
    
    add_term12 = (2*e^5 + 2*e^3) * cos(theta).^3 + ...
        (e^6 + 4 * e^4 + 7 * e^2) * cos(theta).^2 + ...
        (-e^5 + 8 * e^3 + 5 * e) * cos(theta) + ...
        (-e^6 + e^4 + 3 * e^2 + 1);
    
    add_term12_0 =(2*e^5 + 2*e^3) * cos(theta0_2).^3 + ...
        (e^6 + 4 * e^4 + 7 * e^2) * cos(theta0_2).^2 + ...
        (-e^5 + 8 * e^3 + 5 * e) * cos(theta0_2) + ...
        (-e^6 + e^4 + 3 * e^2 + 1);
    
    IDrag1(3,:) = - (e^4 - 2 * e^3 + 2 * e^2 - 2 * e + 1) / (3 * e^2 * (1-e)^3 * (1+e)^2  ) * ElliE + ...
        +  ( (e^4 - 2 * e^2 + 1) / ( 3 * e^2 * (1-e)^3 * (1+e)^2 )  ) * ElliF + ...
        - sin(theta) .* e .* add_term12 ./ ( 3 * e^2 * (1+e)^2 *  (1-e)^2 * (1+e*cos(theta)).^3 .* sqrt(1+e^2+2*e*cos(theta))) + ...
        sin(theta0_2) .*  e .* add_term12_0 ./ ( 3 * e^2 * (1+e)^2 * (1-e)^2 * (1+e*cos(theta0_2)).^3 .* sqrt(1+e^2+2*e*cos(theta0_2)))  ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag13
    % =========================================================================
    
    add_term13 = ( 16*e^6 + 16*e^4) * cos(theta).^4 + ...
        (2*e^7 + 60*e^5 + 66*e^3) * cos(theta).^3 + ...
        (-3*e^8 + 15 * e^6 + 75 * e^4 + 105 * e^2) * cos(theta).^2 + ...
        (10 * e^7 - 24 * e^5 + 82 *e^3 + 60 *e) * cos(theta) + ...
        (6*e^8 - 11 *e^6 - e^4 + 27 *e^2 + 11);
    
    add_term13_0 =( 16*e^6 + 16*e^4) * cos(theta0_2).^4 + ...
        (2*e^7 + 60*e^5 + 66*e^3) * cos(theta0_2).^3 + ...
        (-3*e^8 + 15 * e^6 + 75 * e^4 + 105 * e^2) * cos(theta0_2).^2 + ...
        (10 * e^7 - 24 * e^5 + 82 *e^3 + 60 *e) * cos(theta0_2) + ...
        (6*e^8 - 11 *e^6 - e^4 + 27 *e^2 + 11);
    
    
    IDrag1(4,:) = - (e^4 - 2 * e^3 + 2 * e^2 - 2 * e + 1) / (3 * e^2 * (1-e)^4 * (1+e)^3  ) * ElliE   + ...
        +  ( (e^4 - 2 * e^2 + 1) / ( 12 * e^2 * (1-e)^4 * (1+e)^3 )  ) * ElliF + ...
        + ( (e^5 + e^4 - 2 * e^3 - 2 * e^2 + e + 1 ) / (4 * e^2 * (1-e)^4 * (1+e)^3) ) *   EllipticPi   + ...
        - sin(theta) .* e .* add_term13 ./ ( 24 * e^2 * (1+e)^3 *  (1-e)^3 * (1+e*cos(theta)).^4 .* sqrt(1+e^2+2*e*cos(theta))) + ...
        sin(theta0_2) .*  e .* add_term13_0 ./ ( 24 * e^2 * (1+e)^3 * (1-e)^3 * (1+e*cos(theta0_2)).^4 .* sqrt(1+e^2+2*e*cos(theta0_2)))   ;
    % =========================================================================
    
    
    
    % =========================================================================
    % Idrag14
    % =========================================================================
    
    other14 =   (16 * e^9 + 24 * e^7 + 56 *e^5) * cos(theta).^5 + ...
        (8 * e^10 + 62 *e^8 + 132 * e^6 + 278 *e^4) * cos(theta).^4 + ...
        (29 * e^9 + 97 * e^7 + 279 *e^5 + 555 *e^3) * cos(theta).^3 + ...
        (4 * e^10 + 23 *e^8 + 103 *e^6 + 269 *e^4 + 561 *e^2) * cos(theta).^2 + ...
        (-22*e^9 + 111*e^7 - 97*e^5 + 229*e^3 + 259*e) * cos(theta) + ...
        (-12*e^10 + 34*e^8 - 11* e^6 - 29*e^4 + 71*e^2 + 43);
    
    other14_0 = (16 * e^9 + 24 * e^7 + 56 *e^5) * cos(theta0_2).^5 + ...
        (8 * e^10 + 62 *e^8 + 132 * e^6 + 278 *e^4) * cos(theta0_2).^4 + ...
        (29 * e^9 + 97 * e^7 + 279 *e^5 + 555 *e^3) * cos(theta0_2).^3 + ...
        (4 * e^10 + 23 *e^8 + 103 *e^6 + 269 *e^4 + 561 *e^2) * cos(theta0_2).^2 + ...
        (-22*e^9 + 111*e^7 - 97*e^5 + 229*e^3 + 259*e) * cos(theta0_2) + ...
        (-12*e^10 + 34*e^8 - 11* e^6 - 29*e^4 + 71*e^2 + 43);
    
    
    IDrag1(5,:) = - ( (2*e^6 - 4 * e^5 +5*e^4 - 6*e^3 + 10*e^2 -14*e + 7) / (15 * e^2 * (1-e)^5 * (1+e)^4 ) ) * ElliE   + ...
        + ((4*e^6 - 9*e^4 + 6*e^2 -1) / (30 * e^2 * (1-e)^5 * (1+e)^4 ) )* ElliF + ...
        + (1 / (2*e^2 * (1-e)^3 * (1+e) )) *   EllipticPi   + ...
        - sin(theta) .*  other14 ./  ( 60 * e * (1+e)^4 * (1-e)^4 * (1+e*cos(theta)).^5 .* sqrt(1+e^2+2*e*cos(theta)) )+ ...
        ( sin(theta0_2) .*  other14_0 ./  ( 60 * e * (1+e)^4 * (1-e)^4 * (1+e*cos(theta0_2)).^5 .* sqrt(1+e^2+2*e*cos(theta0_2)) )) ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag15
    % =========================================================================
    
    other15 =  (192*e^10 - 32*e^8 +352*e^6) * cos(theta).^6 + ...
        (66*e^11 + 986 * e^9 -58 * e^7 + 2078 *e^5) * cos(theta).^5 + ...
        (-15*e^12 + 374 * e^10 + 2008 *e^8 + 202 * e^6 + 5111 *e^4) * cos(theta).^4 + ...
        (-52*e^11 + 804 * e^9 + 2060 * e^7 + 716 *e^5 + 6712 *e^3) * cos(theta).^3 + ...
        (-10*e^12 - 16 * e^10 + 728 *e^8 + 1212 *e^6 + 786 *e^4 + 4980 *e^2) * cos(theta).^2 + ...
        (76*e^11 -416*e^9 + 1170*e^7 - 462*e^5 + 810*e^3 + 1894*e) * cos(theta) + ...
        (40*e^12 -154*e^10 + 163*e^8 + 138* e^6 - 228*e^4 + 272*e^2 + 281);
    
    other15_0 = (192*e^10 - 32*e^8 +352*e^6) * cos(theta0_2).^6 + ...
        (66*e^11 + 986 * e^9 -58 * e^7 + 2078 *e^5) * cos(theta0_2).^5 + ...
        (-15*e^12 + 374 * e^10 + 2008 *e^8 + 202 * e^6 + 5111 *e^4) * cos(theta0_2).^4 + ...
        (-52*e^11 + 804 * e^9 + 2060 * e^7 + 716 *e^5 + 6712 *e^3) * cos(theta0_2).^3 + ...
        (-10*e^12 - 16 * e^10 + 728 *e^8 + 1212 *e^6 + 786 *e^4 + 4980 *e^2) * cos(theta0_2).^2 + ...
        (76*e^11 -416*e^9 + 1170*e^7 - 462*e^5 + 810*e^3 + 1894*e) * cos(theta0_2) + ...
        (40*e^12 -154*e^10 + 163*e^8 + 138* e^6 - 228*e^4 + 272*e^2 + 281);
    
    IDrag1(6,:) = - ( (6*e^6 - 12 * e^5 + 5*e^4  + 2 *e^3 + 10*e^2 -22*e + 11) / (15 * e^2 * (1-e)^6 * (1+e)^5 ) ) * ElliE   + ...
        + ((33*e^6 - 83*e^4 + 67*e^2 -17) / (120*  e^2 * (1-e)^6 * (1+e)^5 ) )* ElliF + ...
        + ((e^6 + 5 *e^4 - 13 * e^2 + 7) / (8*e^2 * (1-e)^6 * (1+e)^4 )) *   EllipticPi   + ...
        - sin(theta) .*  other15 ./  ( 240 * e * (1+e)^5 * (1-e)^5 * (1+e*cos(theta)).^6 .* sqrt(1+e^2+2*e*cos(theta)) )+ ...
        ( sin(theta0_2) .*  other15_0 ./  ( 240 * e * (1+e)^5 * (1-e)^5 * (1+e*cos(theta0_2)).^6 .* sqrt(1+e^2+2*e*cos(theta0_2)) )) ;
    % =========================================================================
    
    
    
    % =========================================================================
    % Idrag16
    % =========================================================================
    
    other16 =  (32*e^12 + 316*e^10 - 216*e^8 + 508*e^6) * cos(theta).^6 + ...
        (103*e^11 + 1947 * e^9 -1451 * e^7 + 3241 *e^5) * cos(theta).^5 + ...
        (16*e^12 + 59 * e^10 + 4987 *e^8 - 4135 * e^6 + 8673 *e^4) * cos(theta).^4 + ...
        (30*e^11 - 98 * e^9 + 6834 * e^7 - 6454 *e^5 + 12488 *e^3) * cos(theta).^3 + ...
        (12*e^12 - 26 * e^10 - 138 *e^8 + 5430 *e^6 - 5922 *e^4 + 10244 *e^2) * cos(theta).^2 + ...
        (4*e^11 + 22*e^9 - 269*e^7 + 2667*e^5 - 3163*e^3 + 4579*e) * cos(theta) + ...
        (-60*e^12 + 352*e^10 - 838*e^8 + 983* e^6 - 185*e^4 - 435*e^2 + 823);
    
    other16_0 = (32*e^12 + 316*e^10 - 216*e^8 + 508*e^6) * cos(theta0_2).^6 + ...
        (103*e^11 + 1947 * e^9 -1451 * e^7 + 3241 *e^5) * cos(theta0_2).^5 + ...
        (16*e^12 + 59 * e^10 + 4987 *e^8 - 4135 * e^6 + 8673 *e^4) * cos(theta0_2).^4 + ...
        (30*e^11 - 98 * e^9 + 6834 * e^7 - 6454 *e^5 + 12488 *e^3) * cos(theta0_2).^3 + ...
        (12*e^12 - 26 * e^10 - 138 *e^8 + 5430 *e^6 - 5922 *e^4 + 10244 *e^2) * cos(theta0_2).^2 + ...
        (4*e^11 + 22*e^9 - 269*e^7 + 2667*e^5 - 3163*e^3 + 4579*e) * cos(theta0_2) + ...
        (-60*e^12 + 352*e^10 - 838*e^8 + 983* e^6 - 185*e^4 - 435*e^2 + 823);
    
    IDrag1(7,:) = - ( (8*e^6 + 79*e^4  -54*e^2 + 127) / (105 * e^2 * (1-e)^5 * (1+e)^6 ) ) * ElliE   + ...
        + ((16*e^4 + 85*e^2 -61) / (210*  e^2 * (1-e)^5 * (1+e)^4 ) )* ElliF + ...
        + (( 3 + e^2) / (2*e^2 * (1-e)^5 * (1+e)^3 )) *   EllipticPi   + ...
        - sin(theta)  .* sqrt(1+e^2+2*e*cos(theta)) .* other16 ./  ( 420 * e * (e^12 - 6 * e^10 + 15*e^8 - 20 *e^6 + 15*e^4 - 6* e^2 +1) * (1+e*cos(theta)).^7  )+ ...
        ( sin(theta0_2)  .* sqrt(1+e^2+2*e*cos(theta0_2)) .* other16_0 ./  ( 420 * e * (e^12 - 6 * e^10 + 15*e^8 - 20 *e^6 + 15*e^4 - 6* e^2 +1) * (1+e*cos(theta0_2)).^7  )) ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag17
    % =========================================================================
    
    other17 =  (1024 * e^13 + 2944 * e^11 - 3328 * e^9 + 5504 * e^7 ) * cos(theta).^7 + ...
        (-105 * e^14 + 6084 * e^12 + 22058 * e^10 - 25596 * e^8 + 40567 * e^6) * cos(theta).^6 + ...
        (-258 * e^13 + 14536 * e^11 + 71220 * e^9 - 85176 * e^7 + 128702 *e^5) * cos(theta).^5 + ...
        (-70 * e^14 + 219 * e^12 + 17456 * e^10 + 128778 *e^8 - 159410 * e^6 + 228067 *e^4) * cos(theta).^4 + ...
        (-120*e^13 + 940 * e^11 + 10368 * e^9 + 141736 * e^7 - 182056 *e^5 + 244172 *e^3) * cos(theta).^3 + ...
        (-56 * e^14 + 204 * e^12 + 621 * e^10 + 1172 *e^8 + 96774 *e^6 - 128040 *e^4 + 158349 *e^2) * cos(theta).^2 + ...
        (-16 * e^13 - 88 * e^11 + 1398 * e^9 - 4200 * e^7 + 40532 * e^5 - 52528 * e^3 +  57910 *e) * cos(theta) + ...
        (336 * e^14 - 2312 * e^12 + 6714 * e^10  - 10415 * e^8 + 8776 * e^6 + 1766 * e^4 - 7690 * e^2 + 8969);
    
    other17_0 = (1024 * e^13 + 2944 * e^11 - 3328 * e^9 + 5504 * e^7 ) * cos(theta0_2).^7 + ...
        (-105 * e^14 + 6084 * e^12 + 22058 * e^10 - 25596 * e^8 + 40567 * e^6) * cos(theta0_2).^6 + ...
        (-258 * e^13 + 14536 * e^11 + 71220 * e^9 - 85176 * e^7 + 128702 *e^5) * cos(theta0_2).^5 + ...
        (-70 * e^14 + 219 * e^12 + 17456 * e^10 + 128778 *e^8 - 159410 * e^6 + 228067 *e^4) * cos(theta0_2).^4 + ...
        (-120*e^13 + 940 * e^11 + 10368 * e^9 + 141736 * e^7 - 182056 *e^5 + 244172 *e^3) * cos(theta0_2).^3 + ...
        (-56 * e^14 + 204 * e^12 + 621 * e^10 + 1172 *e^8 + 96774 *e^6 - 128040 *e^4 + 158349 *e^2) * cos(theta0_2).^2 + ...
        (-16 * e^13 - 88 * e^11 + 1398 * e^9 - 4200 * e^7 + 40532 * e^5 - 52528 * e^3 +  57910 *e) * cos(theta0_2) + ...
        (336 * e^14 - 2312 * e^12 + 6714 * e^10  - 10415 * e^8 + 8776 * e^6 + 1766 * e^4 - 7690 * e^2 + 8969);
    
    IDrag1(8,:) = - ( (8*e^6 + 23*e^4  -26*e^2 + 43) / (21 * e^2 * (1-e)^6 * (1+e)^7 ) ) * ElliE   + ...
        + ((407*e^4 + 690*e^2 -713) / (1344 *  e^2 * (1-e)^6 * (1+e)^5 ) )* ElliF + ...
        + (( 5*e^4 + 86 * e^2 + 165) / (64 * e^2 * (1-e)^6 * (1+e)^4 )) *   EllipticPi   + ...
        + sin(theta)  .* sqrt(1+e^2+2*e*cos(theta)) .* other17 ./  ( 2688 * e * (e^14 - 7 *e^12 + 21 * e^10 -35 * e^8 + 35 *e^6 -21 * e^4 + 7 * e^2 - 1) * (1+e*cos(theta)).^8  )  -  ...
        ( sin(theta0_2)  .* sqrt(1+e^2+2*e*cos(theta0_2)) .* other17_0 ./  ( 2688 * e * (e^14 - 7 *e^12 + 21 * e^10 -35 * e^8 + 35 *e^6 -21 * e^4 + 7 * e^2 - 1) * (1+e*cos(theta0_2)).^8  )) ;
    % =========================================================================
    
    
    
    %% IDrag4 (first part)
    
    % =========================================================================
    % Idrag40
    % =========================================================================
    IDrag4(1,:) = 1/(1-e) * ElliE2 + 1 / (1+e) * ElliF2 - ...
        e * sin(theta) .* sqrt(1+e^2+2*e*cos(theta))./ ( (1-e^2) * (1+e*cos(theta))) + ...
        e * sin(theta0_2) .* sqrt(1+e^2+2*e*cos(theta0_2)) ./ ( (1-e^2) * (1+e*cos(theta0_2))) ;
    
    
    
    %% IDrag2
    
    % =========================================================================
    % Idrag20
    % =========================================================================
    IDrag2(1,:) = 2 * (1+e) * ElliE2;
    
    
    
    % =========================================================================
    % Idrag21 - SCRIVERLO
    % =========================================================================
    IDrag2(2,:) = 4 / (1+e) * ElliF2 + ...
        - 2 * (1-e) / (1+e) * EllipticPi2;
    
    
    % =========================================================================
    % Idrag22
    % =========================================================================
    IDrag2(3,:) = IDrag4(1,:);
    
    
    % =========================================================================
    % Idrag23
    % =========================================================================
    other23 = 2*e^2 + 8 * e * cos(theta) + 4 * e^2 * cos(theta).^2 -e^4 + 3;
    other23_0 = 2*e^2 + 8 * e * cos(theta0_2) + 4 * e^2 * cos(theta0_2).^2 -e^4 + 3;
    
    IDrag2(4,:) = - 1 / ( (1-e) * (1+e)^2) * ElliE + ...
        - 1 / (1-e)^2 * EllipticPi + ...
        - ( sin(theta) .* e .* other23 ) ./ (2 * ( (1-e) * (1+e) )^2 * sqrt(1+e^2+2*e*cos(theta)) .* (1+e*cos(theta)).^2) + ...
        (sin(theta0_2) .* e .* other23_0 ) ./ (2 * ( (1-e) * (1+e) )^2 * sqrt(1+e^2+2*e*cos(theta0_2)) .* (1+e*cos(theta0_2)).^2) ;
    % =========================================================================
    
    
    
    % =========================================================================
    % Idrag24
    % =========================================================================
    other24 = ( (2*e^4 + 2 * e^2) * cos(theta).^2 + (2*e^3 + 6 *e) * cos(theta) + e^4 - 2 * e^2 + 5);
    other24_0 =  ( (2*e^4 + 2 * e^2) * cos(theta0_2).^2 + (2*e^3 + 6 *e) * cos(theta0_2) + e^4 - 2 * e^2 + 5);
    
    IDrag2(5,:) = - 2 * (1+e^2) / ( 3 * (1-e) * (1+e)^2 * (1-e^2))  * ElliE + ...
        + 2 / (3 * (1-e^2) * (1-e) ) * ElliF + ...
        - 2 / ( (1-e)^2 * (1-e^2) ) * EllipticPi + ...
        + ( sin(theta) .* e .* other24 .* sqrt(1+e^2+2*e*cos(theta)) ) ./ ( 3 * (e^6 - 3 * e^4 + 3 * e^2 - 1) * (1+e*cos(theta)).^3 ) - ...
        ( ( sin(theta0_2) .* e .* other24_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ) ./ ( 3 * (e^6 - 3 * e^4 + 3 * e^2 - 1) * (1+e*cos(theta0_2)).^3 ) ) ;
    
    % =========================================================================
    
    
    % =========================================================================
    % Idrag25
    % =========================================================================
    other25 = 16 * e^5 * cos(theta).^3 + (-3*e^6 + 46 * e^4 + 5 * e^2) * cos(theta).^2 + (-2*e^5 + 36 * e^3 + 14 * e)* cos(theta) - 2 * e^6 + 7 * e^4 + 11;
    other25_0 =  16 * e^5 * cos(theta0_2).^3 + (-3*e^6 + 46 * e^4 + 5 * e^2) * cos(theta0_2).^2 + (-2*e^5 + 36 * e^3 + 14 * e)* cos(theta0_2) - 2 * e^6 + 7 * e^4 + 11;
    
    IDrag2(6,:) = - 2 * e^2 / ( (1-e)^3 * (1+e)^4 )  * ElliE + ...
        + 5 / (4 * (1-e)^3 * (1+e)^2 ) * ElliF + ...
        - (3*e^2 + 13) / ( 4 * (1-e)^4 * (1+e)^2 ) * EllipticPi + ...
        - ( sin(theta) .* e .* other25 .* sqrt(1+e^2+2*e*cos(theta)) ) ./ ( 8 * (e^8 - 4 * e^6 + 6 * e^4 - 4 * e^2 + 1 ) * (1+e*cos(theta)).^4 ) + ...
        ( ( sin(theta0_2) .* e .* other25_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ) ./ ( 8 * (e^8 - 4 * e^6 + 6 * e^4 - 4 * e^2 + 1 ) * (1+e*cos(theta0_2)).^4 ) )  ;
    
    % =========================================================================
    
    
    % =========================================================================
    % Idrag26
    % =========================================================================
    other26 = (16*e^8 + 114 * e^6 - 34 * e^4) * cos(theta).^4 + ...
        (27 * e^7 + 482 * e^5 - 125 * e^3) * cos(theta).^3 + ...
        (8 * e^8 - 15 *e^6 + 738 * e^4 -155 * e^2) * cos(theta).^2 + ...
        (4 * e^7 - 11 * e^5 + 450 * e^3 - 59 * e) * cos(theta) + ...
        (6 * e^8 - 28 * e^6 + 51 * e^4 + 56 * e^2 + 11);
    
    other26_0 =  (16*e^8 + 114 * e^6 - 34 * e^4) * cos(theta0_2).^4 + ...
        (27 * e^7 + 482 * e^5 - 125 * e^3) * cos(theta0_2).^3 + ...
        (8 * e^8 - 15 *e^6 + 738 * e^4 -155 * e^2) * cos(theta0_2).^2 + ...
        (4 * e^7 - 11 * e^5 + 450 * e^3 - 59 * e) * cos(theta0_2) + ...
        (6 * e^8 - 28 * e^6 + 51 * e^4 + 56 * e^2 + 11);
    
    % Without Elliptic Pi
    IDrag2(7,:) = -  (8*e^4 + 57*e^2 - 17) / ( 15 * (1-e)^4 * (1+e)^5)  * ElliE + ...
        + (4 * (2*e^2+7) ) / (15 * (1-e)^4 * (1+e)^3 ) * ElliF + ...
        - (3*e^2 + 5) / ( (1-e)^5 * (1+e)^3 ) * EllipticPi + ...
        + ( sin(theta) .* e .* other26 .* sqrt(1+e^2+2*e*cos(theta)) ) ./ ( 30 * (e^10 - 5 * e^8 + 10 * e^6 - 10 * e^4 + 5 * e^2 - 1 ) * (1+e*cos(theta)).^5 ) - ...
        ( ( sin(theta0_2) .* e .* other26_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ) ./ ( 30 * (e^10 - 5 * e^8 + 10 * e^6 - 10 * e^4 + 5 * e^2 - 1 ) * (1+e*cos(theta0_2)).^5 ) )  ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag27
    % =========================================================================
    other27 = (128 * e^9 + 272 * e^7 - 144 * e^5) * cos(theta).^5 + ...
        (-15 * e^10 + 533 *e^8 + 1491 * e^6 - 729 * e^4) * cos(theta).^4 + ...
        (-16 * e^9 + 784 * e^7 + 3248 * e^5 - 1456 * e^3) * cos(theta).^3 + ...
        (-10 * e^10 + 50 * e^8 + 470 *e^6 + 3462 * e^4 -1412 * e^2) * cos(theta).^2 + ...
        (-4 * e^9 + 24 * e^7 + 176 * e^5 + 1720 * e^3 - 636 * e) * cos(theta) + ...
        (-8 * e^10 + 46 * e^8 - 107 * e^6 + 165 * e^4 + 247 * e^2 - 87);
    
    other27_0 =  (128 * e^9 + 272 * e^7 - 144 * e^5) * cos(theta0_2).^5 + ...
        (-15 * e^10 + 533 *e^8 + 1491 * e^6 - 729 * e^4) * cos(theta0_2).^4 + ...
        (-16 * e^9 + 784 * e^7 + 3248 * e^5 - 1456 * e^3) * cos(theta0_2).^3 + ...
        (-10 * e^10 + 50 * e^8 + 470 *e^6 + 3462 * e^4 -1412 * e^2) * cos(theta0_2).^2 + ...
        (-4 * e^9 + 24 * e^7 + 176 * e^5 + 1720 * e^3 - 636 * e) * cos(theta0_2) + ...
        (-8 * e^10 + 46 * e^8 - 107 * e^6 + 165 * e^4 + 247 * e^2 - 87);
    
    IDrag2(8,:) = -  (8*e^4 + 17*e^2 - 9) / ( 3 * (1-e)^5 * (1+e)^6)  * ElliE + ...
        + (7 * (7*e^2+9) ) / (24 * (1-e)^5 * (1+e)^4 ) * ElliF + ...
        - (5*e^4 + 62 * e^2 + 61) / ( 8 * (1-e)^6 * (1+e)^4 ) * EllipticPi + ...
        - ( sin(theta) .* e .* other27 .* sqrt(1+e^2+2*e*cos(theta)) ) ./ ( 48 * (e^12 - 6 * e^10 + 15 * e^8 -20 * e^6 + 15 * e^4 - 6 * e^2 + 1 ) * (1+e*cos(theta)).^6 ) + ...
        ( ( sin(theta0_2) .* e .* other27_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ) ./ ( 48 * (e^12 - 6 * e^10 + 15 * e^8 -20 * e^6 + 15 * e^4 - 6 * e^2 + 1 ) * (1+e*cos(theta0_2)).^6 ) )  ;
    % =========================================================================
    
    
    
    %% Idrag4 (second part)
    
    % =========================================================================
    % Idrag41
    % =========================================================================
    IDrag4(2,:) = IDrag2(4,:);
    
    
    % =========================================================================
    % Idrag42
    % =========================================================================
    IDrag4(3,:) = IDrag2(5,:);
    
    
    % =========================================================================
    % Idrag43
    % =========================================================================
    IDrag4(4,:) = IDrag2(6,:);
    
    
    
    % =========================================================================
    % Idrag44
    % =========================================================================
    IDrag4(5,:) = IDrag2(7,:);
    
    
    % =========================================================================
    % Idrag45
    % =========================================================================
    IDrag4(6,:) = IDrag2(8,:);
    
    
    % =========================================================================
    % Idrag46
    % =========================================================================
    other46 = (384*e^12 + 6592*e^10+5808*e^8-5104*e^6)*cos(theta).^6+ ...
        (921*e^11 + 37469*e^9+39323*e^7-31633*e^5)*cos(theta).^5+...
        (192*e^12 + 113*e^10+85429*e^8+110995*e^6-81529*e^4)*cos(theta).^4+...
        (150*e^11 + 434*e^9+98038*e^7+166502*e^5-111524*e^3)*cos(theta).^3+...
        (144*e^12 - 942*e^10+3594*e^8+58790*e^6+138446*e^4-84832*e^2)*cos(theta).^2+...
        ( 48*e^11 - 366*e^9+1637*e^7+19789*e^5+58399*e^3-33427*e)*cos(theta)+...
        120*e^12 - 816*e^10+2334*e^8-3499*e^6+6285*e^4+8255*e^2-4999;
    
    other46_0 = (384*e^12+6592*e^10+5808*e^8-5104*e^6)*cos(theta0_2).^6+ ...
        (921*e^11+37469*e^9+39323*e^7-31633*e^5)*cos(theta0_2).^5+...
        (192*e^12+113*e^10+85429*e^8+110995*e^6-81529*e^4)*cos(theta0_2).^4+...
        (150*e^11+434*e^9+98038*e^7+166502*e^5-111524*e^3)*cos(theta0_2).^3+...
        (144*e^12-942*e^10+3594*e^8+58790*e^6+138446*e^4-84832*e^2)*cos(theta0_2).^2+...
        (48*e^11-366*e^9+1637*e^7+19789*e^5+58399*e^3-33427*e)*cos(theta0_2)+...
        120*e^12-816*e^10+2334*e^8-3499*e^6+6285*e^4+8255*e^2-4999;
    
    IDrag4(7,:) = -  2 * (24 * e^6 + 412*e^4 + 363*e^2 - 319) / ( 105 * (1-e)^6 * (1+e)^7 )  * ElliE + ...
        + ( (192*e^4 + 2105*e^2 + 1543) ) / (420 * (1-e)^6 * (1+e)^5 ) * ElliF + ...
        - (15*e^4 + 66 * e^2 + 47) / ( 4 * (1-e)^7 * (1+e)^5 ) * EllipticPi + ...
        ( sin(theta) .* e .* other46 .* sqrt(1+e^2+2*e*cos(theta)) ) ./ ( 840 * (e^14 - 7 * e^12 + 21 * e^10 -35 * e^8 +35 * e^6 -21 * e^4 +7 * e^2 - 1 ) * (1+e*cos(theta)).^7 ) - ...
        ( ( sin(theta0_2) .* e .* other46_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ) ./ ( 840 *  (e^14 - 7 * e^12 + 21 * e^10 -35 * e^8 +35 * e^6 -21 * e^4 +7 * e^2 - 1 ) * (1+e*cos(theta0_2)).^7 ) ) ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag47
    % =========================================================================
    other47 = (6144 * e^13 +33792 * e^11 + 12288 * e^9 - 21504 * e^7) * cos(theta).^7 + ...
        (-525 * e^14 + 33780*e^12 + 235506 *e^10 + 102516*e^8 - 156237 * e^6) * cos(theta).^6 + ...
        (-778 * e^13 + 75304*e^11 + 691908 * e^9 + 365608 * e^7 - 486922 * e^5) * cos(theta).^5 + ...
        (-350 * e^14 + 1927*e^12 + 92752 * e^10 + 1101842 *e^8 + 722342 * e^6 - 843313 * e^4) * cos(theta).^4 + ...
        (-216*e^13 + 988*e^11 +82688 * e^9 + 1015368 * e^7 + 851768 * e^5 - 875396 * e^3) * cos(theta).^3 + ...
        (-280*e^14 + 2172*e^12 -7903 * e^10 + 62916 * e^8 + 536574 *e^6 + 594520 * e^4 -542879 * e^2) * cos(theta).^2 + ...
        (-80*e^13 + 712*e^11 -3122 * e^9 + 22328 * e^7 + 158564 * e^5 + 221264 * e^3 - 184626 * e) * cos(theta) + ...
        (-240*e^14 + 1880*e^12 -6366 * e^10 + 11989 * e^8 - 11384 * e^6 + 30750 * e^4 + 29870* e^2 - 25779);
    
    other47_0 = (6144 * e^13 +33792 * e^11 + 12288 * e^9 - 21504 * e^7) * cos(theta0_2).^7 + ...
        (-525 * e^14 + 33780*e^12 + 235506 *e^10 + 102516*e^8 - 156237 * e^6) * cos(theta0_2).^6 + ...
        (-778 * e^13 + 75304*e^11 + 691908 * e^9 + 365608 * e^7 - 486922 * e^5) * cos(theta0_2).^5 + ...
        (-350 * e^14 + 1927*e^12 + 92752 * e^10 + 1101842 *e^8 + 722342 * e^6 - 843313 * e^4) * cos(theta0_2).^4 + ...
        (-216*e^13 + 988*e^11 +82688 * e^9 + 1015368 * e^7 + 851768 * e^5 - 875396 * e^3) * cos(theta0_2).^3 + ...
        (-280*e^14 + 2172*e^12 -7903 * e^10 + 62916 * e^8 + 536574 *e^6 + 594520 * e^4 -542879 * e^2) * cos(theta0_2).^2 + ...
        (-80*e^13 + 712*e^11 -3122 * e^9 + 22328 * e^7 + 158564 * e^5 + 221264 * e^3 - 184626 * e) * cos(theta0_2) + ...
        (-240*e^14 + 1880*e^12 -6366 * e^10 + 11989 * e^8 - 11384 * e^6 + 30750 * e^4 + 29870* e^2 - 25779);
    
    
    IDrag4(8,:) = -  8 * (2 * e^6 + 11*e^4 + 4*e^2 - 7) / ( 5 * (1-e)^7 * (1+e)^8 )  * ElliE + ...
        + ( (849*e^4 + 3230*e^2 + 1681) ) / (320 * (1-e)^7 * (1+e)^6 ) * ElliF + ...
        - (35*e^6 + 855*e^4 + 2025 * e^2 + 1181) / ( 64 * (1-e)^8 * (1+e)^6 ) * EllipticPi - ...
        ( sin(theta) .* e .* other47 .* sqrt(1+e^2+2*e*cos(theta)) ) ./ ( 1920 * (e^16 - 8 * e^14 + 28 * e^12 - 56 * e^10 + 70 * e^8 - 56 * e^6 + 28 * e^4 - 8 * e^2 + 1 ) * (1+e*cos(theta)).^8 ) + ...
        (  ( sin(theta0_2) .* e .* other47_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ) ./ ( 1920 * (e^16 - 8 * e^14 + 28 * e^12 - 56 * e^10 + 70 * e^8 - 56 * e^6 + 28 * e^4 - 8 * e^2 + 1 ) * (1+e*cos(theta0_2)).^8 )  )  ;
    % =========================================================================
    
    
    
    
    
    %% IDrag5
    
    % =========================================================================
    % Idrag5
    % =========================================================================
    IDrag5(1,:) = -2 / (e * sqrt(1-e^2)) * atan2( sqrt(1 + e^2 + 2*e*cos(theta)) , sqrt(1-e^2) ) -...
        (-2 / (e * sqrt(1-e^2)) * atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)) , sqrt(1-e^2) ) )  +...
        sqrt(1 + e^2 + 2*e*cos(theta)) ./ (e * (1+e*cos(theta))) -...
        ( sqrt(1 + e^2 + 2*e*cos(theta0_2)) ./ (e * (1+e*cos(theta0_2))) );
    
    
    % =========================================================================
    % Idrag51
    % =========================================================================
    IDrag5(2,:) = - atan2( sqrt(1 + e^2 + 2*e*cos(theta)) , sqrt(1-e^2) ) / ( e * (1-e^2)^(3/2)) + ...
        (atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)) , sqrt(1-e^2) ) / ( e * (1-e^2)^(3/2)))  - ...
        (e + cos(theta)) .* sqrt(1 + e^2 + 2*e*cos(theta)) ./ ( 2 * (1-e^2) * (1+e*cos(theta)).^2) + ...
        ((e + cos(theta0_2)) .* sqrt(1 + e^2 + 2*e*cos(theta0_2)) ./ ( 2 * (1-e^2) * (1+e*cos(theta0_2)).^2)) ;
    
    
    % =========================================================================
    % Idrag52
    % =========================================================================
    IDrag5(3,:) = - (1/(e*(1-e^2)^(5/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta)), sqrt(1-e^2) ) + ...
        (1/(e*(1-e^2)^(5/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)), sqrt(1-e^2) )+ ...
        (-2 + e^2 - e*cos(theta)) .* sqrt(1 + e^2 + 2*e*cos(theta)) .* (1+2*e^2 + 3*e*cos(theta)) ./ ( 6 * e * (1-e^2)^2 * (1+e*cos(theta)).^3) - ...
        ( (-2 + e^2 - e*cos(theta0_2)) .* sqrt(1 + e^2 + 2*e*cos(theta0_2)) .* (1+2*e^2 + 3*e*cos(theta0_2)) ./ ( 6 * e * (1-e^2)^2 * (1+e*cos(theta0_2)).^3) ) ;
    
    
    % =========================================================================
    % Idrag53
    % =========================================================================
    IDrag5(4,:) = - (5/(4*e*(1-e^2)^(7/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta)), sqrt(1-e^2) ) + ...;
        (5/(4*e*(1-e^2)^(7/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)), sqrt(1-e^2) )  + ...
        sqrt(1 + e^2 + 2*e*cos(theta)) ./ (24 * e * (1+e*cos(theta)).^4 ) .* ...
        (6 - 2 * (1+e*cos(theta))/(1-e^2) - 5 * (1+e*cos(theta)).^2/(1-e^2)^2 - 15 * (1+e*cos(theta)).^3/(1-e^2)^3 ) - ...
        sqrt(1 + e^2 + 2*e*cos(theta0_2)) ./ (24 * e * (1+e*cos(theta0_2)).^4 ) .* ...
        (6 - 2 * (1+e*cos(theta0_2))/(1-e^2) - 5 * (1+e*cos(theta0_2)).^2/(1-e^2)^2 - 15 * (1+e*cos(theta0_2)).^3/(1-e^2)^3 ) ;
    
    % =========================================================================
    % Idrag54
    % =========================================================================
    IDrag5(5,:) = - (7/(4*e*(1-e^2)^(9/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta)), sqrt(1-e^2) ) + ...;
        (7/(4*e*(1-e^2)^(9/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)), sqrt(1-e^2) )  - ...
        sqrt(1 + e^2 + 2*e*cos(theta)) ./ (120 * e * (1+e*cos(theta)).^5 ) .* ...
        (-24 + 6 * (1+e*cos(theta))/(1-e^2) + 14 * (1+e*cos(theta)).^2/(1-e^2)^2 + 35 * (1+e*cos(theta)).^3/(1-e^2)^3 + 105 * (1+e*cos(theta)).^4/(1-e^2)^4 ) + ...
        sqrt(1 + e^2 + 2*e*cos(theta0_2)) ./ (120 * e * (1+e*cos(theta0_2)).^5 ) .* ...
        (-24 + 6 * (1+e*cos(theta0_2))/(1-e^2) + 14 * (1+e*cos(theta0_2)).^2/(1-e^2)^2 + 35 * (1+e*cos(theta0_2)).^3/(1-e^2)^3 + 105 * (1+e*cos(theta0_2)).^4/(1-e^2)^4 ) ;
    
    
    % =========================================================================
    % Idrag55
    % =========================================================================
    IDrag5(6,:) = - (21/(8*e*(1-e^2)^(11/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta)), sqrt(1-e^2) ) + ...;
        (21/(8*e*(1-e^2)^(11/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)), sqrt(1-e^2) )  + ...
        sqrt(1 + e^2 + 2*e*cos(theta)) ./ (240 * e * (1+e*cos(theta)).^6 ) .* ...
        (40 - 8 * (1+e*cos(theta))/(1-e^2) - 18 * (1+e*cos(theta)).^2/(1-e^2)^2 - 42 * (1+e*cos(theta)).^3/(1-e^2)^3 - 105 * (1+e*cos(theta)).^4/(1-e^2)^4 + ...
        - 315 * (1+e*cos(theta)).^5/(1-e^2)^5) - ...
        sqrt(1 + e^2 + 2*e*cos(theta0_2)) ./ (240 * e * (1+e*cos(theta0_2)).^6 ) .* ...
        (40 - 8 * (1+e*cos(theta0_2))/(1-e^2) - 18 * (1+e*cos(theta0_2)).^2/(1-e^2)^2 - 42 * (1+e*cos(theta0_2)).^3/(1-e^2)^3 - 105 * (1+e*cos(theta0_2)).^4/(1-e^2)^4 + ...
        - 315 * (1+e*cos(theta0_2)).^5/(1-e^2)^5);
    
    
    % =========================================================================
    % Idrag56
    % =========================================================================
    IDrag5(7,:) = - (33/(8*e*(1-e^2)^(13/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta)), sqrt(1-e^2) ) + ...;
        (33/(8*e*(1-e^2)^(13/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)), sqrt(1-e^2) )  - ...
        sqrt(1 + e^2 + 2*e*cos(theta)) ./ (8 * 210 * e * (1+e*cos(theta)).^7 ) .* ...
        (-240 + 40 * (1+e*cos(theta))/(1-e^2) + 88 * (1+e*cos(theta)).^2/(1-e^2)^2 + 198 * (1+e*cos(theta)).^3/(1-e^2)^3 + 462 * (1+e*cos(theta)).^4/(1-e^2)^4 + ...
        + 1155 * (1+e*cos(theta)).^5/(1-e^2)^5 + 3465 * (1+e*cos(theta)).^6/(1-e^2)^6) + ...
        sqrt(1 + e^2 + 2*e*cos(theta0_2)) ./ (8 * 210 * e * (1+e*cos(theta0_2)).^7 ) .* ...
        (-240 + 40 * (1+e*cos(theta0_2))/(1-e^2) + 88 * (1+e*cos(theta0_2)).^2/(1-e^2)^2 + 198 * (1+e*cos(theta0_2)).^3/(1-e^2)^3 + 462 * (1+e*cos(theta0_2)).^4/(1-e^2)^4 + ...
        + 1155 * (1+e*cos(theta0_2)).^5/(1-e^2)^5 + 3465 * (1+e*cos(theta0_2)).^6/(1-e^2)^6) ;
    
    
    % =========================================================================
    % Idrag57
    % =========================================================================
    IDrag5(8,:) = - (429/(64*e*(1-e^2)^(15/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta)), sqrt(1-e^2) ) + ...;
        (429/(64*e*(1-e^2)^(15/2))) * atan2( sqrt(1 + e^2 + 2*e*cos(theta0_2)), sqrt(1-e^2) )  + ...
        sqrt(1 + e^2 + 2*e*cos(theta)) ./ (64 * 210 * e * (1+e*cos(theta)).^8 ) .* ...
        (1680 - 240 * (1+e*cos(theta))/(1-e^2) - 520 * (1+e*cos(theta)).^2/(1-e^2)^2 - 1144 * (1+e*cos(theta)).^3/(1-e^2)^3 - 2574 * (1+e*cos(theta)).^4/(1-e^2)^4 + ...
        - 6006 * (1+e*cos(theta)).^5/(1-e^2)^5 - 15015 * (1+e*cos(theta)).^6/(1-e^2)^6 - 45045 * (1+e*cos(theta)).^7/(1-e^2)^7) - ...
        sqrt(1 + e^2 + 2*e*cos(theta0_2)) ./ (64 * 210 * e * (1+e*cos(theta0_2)).^8 ) .* ...
        (1680 - 240 * (1+e*cos(theta0_2))/(1-e^2) - 520 * (1+e*cos(theta0_2)).^2/(1-e^2)^2 - 1144 * (1+e*cos(theta0_2)).^3/(1-e^2)^3 - 2574 * (1+e*cos(theta0_2)).^4/(1-e^2)^4 + ...
        - 6006 * (1+e*cos(theta0_2)).^5/(1-e^2)^5 - 15015 * (1+e*cos(theta0_2)).^6/(1-e^2)^6 - 45045 * (1+e*cos(theta0_2)).^7/(1-e^2)^7) ;
    
    
    %% Idrag6
    
    
    % =========================================================================
    % Idrag60
    % =========================================================================
    IDrag6(1,:) = 1 / (e * (1+e)) * ElliE + ...
        - 3 / (e * (1-e)) * ElliF + ...
        2 * (1+e) / (e * (1-e)) * EllipticPi  + ...
        sin(theta) .* sqrt(1+e^2+2*e*cos(theta)) ./ ( (1-e) * (1+e) *  (1+e*cos(theta))) - ...
        (sin(theta0_2) .* sqrt(1+e^2+2*e*cos(theta0_2)) ./ ( (1-e) * (1+e) *  (1+e*cos(theta0_2)) ) );
    % =========================================================================
    
    
    
    % =========================================================================
    % Idrag61
    % =========================================================================
    other61 = 4 * e^4 * cos(theta) .^2 + ...
        (2*e^5 + 4 * e^3 + 2 * e) * cos(theta) + ...
        e^4 + 2 * e^2 + 1;
    
    other61_0 = 4 * e^4 * cos(theta0_2) .^2 + ...
        (2*e^5 + 4 * e^3 + 2 * e) * cos(theta0_2) + ...
        e^4 + 2 * e^2 + 1;
    
    IDrag6(2,:) = e / ((1-e) * (1+e)^2) * ElliE + ...
        - 1 / (e * (1-e)) * ElliF + ...
        1 / (e * (1-e)^2) * EllipticPi  + ...
        sin(theta) .* other61 ./ (2 * (1-e)^2 * (1+e)^2 *  (1+e*cos(theta)).^2 .* sqrt(1+e^2+2*e*cos(theta))) - ...
        (sin(theta0_2) .* other61_0 ./ (2 * (1-e)^2 * (1+e)^2 *  (1+e*cos(theta0_2)).^2 .* sqrt(1+e^2+2*e*cos(theta0_2))) ) ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag62
    % =========================================================================
    other62 =  (20*e^5 - 4*e^3) * cos(theta).^3 + ...
        (4*e^6 + 52*e^4 - 8*e^2)* cos(theta) .^2 + ...
        (-3*e^7 + 17*e^5 + 35*e^3 -e) * cos(theta) + ...
        -e^6 + 7*e^4 + 9*e^2 +1;
    
    other62_0 =(20*e^5 - 4*e^3) * cos(theta0_2).^3 + ...
        (4*e^6 + 52*e^4 - 8*e^2)* cos(theta0_2) .^2 + ...
        (-3*e^7 + 17*e^5 + 35*e^3 -e) * cos(theta0_2) + ...
        -e^6 + 7*e^4 + 9*e^2 +1;
    
    IDrag6(3,:) = (5*e^4 - 10*e^3 + 4*e^2 + 2*e -1) / (3 * e * (1-e)^4 * (1+e)^3) * ElliE + ...
        - 2 / (3 * e * (1-e)^2 * (1+e)) * ElliF + ...
        (1 + e^2) / (e * (1-e)^3  * (1+e)) * EllipticPi  + ...
        sin(theta)  .* other62 ./ (6 * (1-e)^3 * (1+e)^3 *  (1+e*cos(theta)).^3 .* sqrt(1+e^2+2*e*cos(theta))) - ...
        (sin(theta0_2)  .* other62_0 ./ (6 * (1-e)^3 * (1+e)^3 *  (1+e*cos(theta0_2)).^3 .* sqrt(1+e^2+2*e*cos(theta0_2))) ) ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag63
    % =========================================================================
    other63 =  (16*e^7 + 48*e^5 - 16*e^3) * cos(theta).^3 + ...
        (23*e^6 + 170*e^4 - 49*e^2)* cos(theta) .^2 + ...
        (8*e^7 - 14*e^5 + 196*e^3 -46*e) * cos(theta) + ...
        +2*e^6 - 3*e^4 + 56*e^2 - 7;
    
    other63_0 =(16*e^7 + 48*e^5 - 16*e^3) * cos(theta0_2).^3 + ...
        (23*e^6 + 170*e^4 - 49*e^2)* cos(theta0_2) .^2 + ...
        (8*e^7 - 14*e^5 + 196*e^3 -46*e) * cos(theta0_2) + ...
        +2*e^6 - 3*e^4 + 56*e^2 - 7;
    
    IDrag6(4,:) = 2 * (e^4 + 3*e^2 -1) / (3 * e * (1-e)^3 * (1+e)^4 ) * ElliE + ...
        - (8*e^2 + 7) / (12 * e * (1-e)^3 * (1+e)^2) * ElliF + ...
        (11 * e^2 + 5) / (4 * e * (1-e)^4  * (1+e)^2 ) * EllipticPi  + ...
        sin(theta)  .* other63 .* sqrt(1+e^2+2*e*cos(theta)) ./ (24 * (e^8 - 4 *e^6 + 6 * e^4 - 4 * e^2 + 1) * (1+e*cos(theta)).^4 ) - ...
        (sin(theta0_2)  .* other63_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ./ (24 * (e^8 - 4 *e^6 + 6 * e^4 - 4 * e^2 + 1) * (1+e*cos(theta0_2)).^4  )) ;
    % =========================================================================
    
    
    % =========================================================================
    % Idrag64
    % =========================================================================
    other64 =  (304*e^8 + 216*e^6 -136*e^4) * cos(theta).^4 + ...
        (-45*e^9 + 1083*e^7 + 1073*e^5 - 575*e^3) * cos(theta).^3 + ...
        (-43*e^8 + 1245*e^6 + 2007*e^4 - 905*e^2)* cos(theta) .^2 + ...
        (-30*e^9 + 121*e^7 + 421*e^5 + 1635*e^3 -611*e) * cos(theta) + ...
        -6*e^8 +23*e^6 + 99*e^4 + 389*e^2 - 121;
    
    other64_0 =(304*e^8 + 216*e^6 -136*e^4) * cos(theta0_2).^4 + ...
        (-45*e^9 + 1083*e^7 + 1073*e^5 - 575*e^3) * cos(theta0_2).^3 + ...
        (-43*e^8 + 1245*e^6 + 2007*e^4 - 905*e^2)* cos(theta0_2) .^2 + ...
        (-30*e^9 + 121*e^7 + 421*e^5 + 1635*e^3 -611*e) * cos(theta0_2) + ...
        -6*e^8 +23*e^6 + 99*e^4 + 389*e^2 - 121;
    
    IDrag6(5,:) = (38*e^4 + 27*e^2 -17) / (15 * e * (1-e)^4 * (1+e)^5 ) * ElliE + ...
        - (107*e^2 + 37) / (60 * e * (1-e)^4 * (1+e)^3) * ElliF + ...
        (3*e^4 + 22 * e^2 + 7) / (4 * e * (1-e)^5  * (1+e)^3 ) * EllipticPi  + ...
        - sin(theta)  .* other64 .* sqrt(1+e^2+2*e*cos(theta)) ./ (120 * (e^10 - 5*e^8 + 10 *e^6 -10*e^4 + 5* e^2 - 1) * (1+e*cos(theta)).^5 ) + ...
        (sin(theta0_2)  .* other64_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ./ (120 * (e^10 - 5*e^8 + 10 *e^6 -10*e^4 + 5* e^2 - 1) * (1+e*cos(theta0_2)).^5  )) ;
    % =========================================================================
    
    
    
    % =========================================================================
    % Idrag65
    % =========================================================================
    other65 = (128*e^11+1424*e^9+176*e^7-448*e^5)*cos(theta).^5+...
        (269*e^10+7089*e^8+1415*e^6-2373*e^4)*cos(theta).^4+...
        (64*e^11-48*e^9+13584*e^7+4240*e^5-5040*e^3)*cos(theta).^3+...
        (46*e^10-54*e^8+12062*e^6+6094*e^4-5348*e^2)*cos(theta).^2+...
        (48*e^11-260*e^9+632*e^7+4608*e^5+4168*e^3-2796*e)*cos(theta)+...
        8*e^10-42*e^8+97*e^6+865*e^4+875*e^2-523;
    
    other65_0 =(128*e^11+1424*e^9+176*e^7-448*e^5)*cos(theta0_2).^5+...
        (269*e^10+7089*e^8+1415*e^6-2373*e^4)*cos(theta0_2).^4+...
        (64*e^11-48*e^9+13584*e^7+4240*e^5-5040*e^3)*cos(theta0_2).^3+...
        (46*e^10-54*e^8+12062*e^6+6094*e^4-5348*e^2)*cos(theta0_2).^2+...
        (48*e^11-260*e^9+632*e^7+4608*e^5+4168*e^3-2796*e)*cos(theta0_2)+...
        8*e^10-42*e^8+97*e^6+865*e^4+875*e^2-523;
    
    IDrag6(6,:) = (8*e^6 + 89*e^4 + 11*e^2 -28) / (15 * e * (1-e)^5 * (1+e)^6 ) * ElliE + ...
        - (64*e^4 + 405*e^2 + 91) / (120 * e * (1-e)^5 * (1+e)^4) * ElliF + ...
        (29*e^4 + 78 * e^2 + 21) / (8 * e * (1-e)^6  * (1+e)^4 ) * EllipticPi  + ...
        sin(theta)  .* other65 .* sqrt(1+e^2+2*e*cos(theta)) ./ (240 * (e^12 - 6*e^10 + 15*e^8 -20*e^6 +15*e^4 -6* e^2 +1) * (1+e*cos(theta)).^6 ) - ...
        (sin(theta0_2)  .* other65_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ./ (240 * (e^12 - 6*e^10 + 15*e^8 -20*e^6 +15*e^4 -6* e^2 +1) * (1+e*cos(theta0_2)).^6  )) ;
    % =========================================================================
    
    
    
    % =========================================================================
    % Idrag66
    % =========================================================================
    
    other66 =  (5248*e^12 + 18224*e^10 - 2944*e^8 - 5168*e^6) * cos(theta).^6 + ...
        (-525*e^13 + 25502*e^11 + 113508*e^9  - 13614*e^7 - 32711*e^5) * cos(theta).^5 + ...
        (-701*e^12 + 47406*e^10 + 290628*e^8 - 20350*e^6 - 86583*e^4) * cos(theta).^4 + ...
        (-350*e^13 + 1840*e^11 + 43568*e^9 + 387036*e^7  - 2226*e^5 - 122668*e^3) * cos(theta).^3 + ...
        (-202*e^12 + 1196*e^10 + 27208*e^8 + 276340*e^6 + 23842*e^4 - 97984*e^2)* cos(theta) .^2 + ...
        (-280*e^13 + 1846*e^11 - 5107*e^9 + 18114*e^7 + 96488*e^5 + 22648*e^3 -41549*e) * cos(theta) + ...
        -40*e^12 + 258*e^10 -687*e^8 + 2522*e^6 + 15440*e^4 + 4820*e^2 - 6953;
    
    other66_0 =(5248*e^12 + 18224*e^10 - 2944*e^8 - 5168*e^6) * cos(theta0_2).^6 + ...
        (-525*e^13 + 25502*e^11 + 113508*e^9  - 13614*e^7 - 32711*e^5) * cos(theta0_2).^5 + ...
        (-701*e^12 + 47406*e^10 + 290628*e^8 - 20350*e^6 - 86583*e^4) * cos(theta0_2).^4 + ...
        (-350*e^13 + 1840*e^11 + 43568*e^9 + 387036*e^7  - 2226*e^5 - 122668*e^3) * cos(theta0_2).^3 + ...
        (-202*e^12 + 1196*e^10 + 27208*e^8 + 276340*e^6 + 23842*e^4 - 97984*e^2)* cos(theta0_2) .^2 + ...
        (-280*e^13 + 1846*e^11 - 5107*e^9 + 18114*e^7 + 96488*e^5 + 22648*e^3 -41549*e) * cos(theta0_2) + ...
        -40*e^12 + 258*e^10 -687*e^8 + 2522*e^6 + 15440*e^4 + 4820*e^2 - 6953;
    
    IDrag6(7,:) = (328*e^6 + 1139*e^4 - 184*e^2 -323) / (105 * e * (1-e)^6 * (1+e)^7 ) * ElliE + ...
        - (2099*e^4 + 4700*e^2 + 881) / (840 * e * (1-e)^6 * (1+e)^5) * ElliF + ...
        (5*e^6 + 87*e^4 + 131 * e^2 + 33) / (8 * e * (1-e)^7  * (1+e)^5 ) * EllipticPi  + ...
        - sin(theta)  .* other66 .* sqrt(1+e^2+2*e*cos(theta)) ./ (1680 * (e^14 - 7*e^12 + 21*e^10 - 35*e^8 + 35*e^6 - 21*e^4 + 7*e^2 - 1) * (1+e*cos(theta)).^7 ) + ...
        (sin(theta0_2)  .* other66_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ./ (1680 * (e^14 - 7*e^12 + 21*e^10 - 35*e^8 + 35*e^6 - 21*e^4 + 7*e^2 - 1)  * (1+e*cos(theta0_2)).^7  )) ;
    % =========================================================================
    
    
    
    % =========================================================================
    % Idrag67
    % =========================================================================
    other67 =  (6144*e^15+142336*e^13+224000*e^11-88576*e^9-68864*e^7)*cos(theta).^7 + ...
        (17205*e^14+920556*e^12+1665662*e^10-592276*e^8-505867*e^6)*cos(theta).^6 + ...
        (3072*e^15+8026*e^13+2476952*e^11+5282076*e^9-1656424*e^7-1597862*e^5)*cos(theta).^5 + ...
        (3022*e^14+16769*e^12+3575984*e^10+9217374*e^8-2472406*e^6-2814343*e^4)*cos(theta).^4 + ...
        (2304*e^15-16488*e^13+84036*e^11+3023616*e^9+9477496*e^7-2058488*e^5-2986076*e^3)*cos(theta).^3 + ...
        (1112*e^14-8796*e^12+49303*e^10+1613980*e^8+5648274*e^6-880024*e^4-1908009*e^2)*cos(theta).^2 + ...
        (1920*e^15-14768*e^13+48760*e^11-83134*e^9+603272*e^7+1759228*e^5-132432*e^3-677566*e)*cos(theta) + ...
        240*e^14-1816*e^12+5838*e^10-9405*e^8+76856*e^6+246770*e^4-2974*e^2-100469;
    
    other67_0 = (6144*e^15+142336*e^13+224000*e^11-88576*e^9-68864*e^7)*cos(theta0_2).^7 + ...
        (17205*e^14+920556*e^12+1665662*e^10-592276*e^8-505867*e^6)*cos(theta0_2).^6 + ...
        (3072*e^15+8026*e^13+2476952*e^11+5282076*e^9-1656424*e^7-1597862*e^5)*cos(theta0_2).^5 + ...
        (3022*e^14+16769*e^12+3575984*e^10+9217374*e^8-2472406*e^6-2814343*e^4)*cos(theta0_2).^4 + ...
        (2304*e^15-16488*e^13+84036*e^11+3023616*e^9+9477496*e^7-2058488*e^5-2986076*e^3)*cos(theta0_2).^3 + ...
        (1112*e^14-8796*e^12+49303*e^10+1613980*e^8+5648274*e^6-880024*e^4-1908009*e^2)*cos(theta0_2).^2 + ...
        (1920*e^15-14768*e^13+48760*e^11-83134*e^9+603272*e^7+1759228*e^5-132432*e^3-677566*e)*cos(theta0_2) + ...
        240*e^14-1816*e^12+5838*e^10-9405*e^8+76856*e^6+246770*e^4-2974*e^2-100469;
    
    IDrag6(8,:) = 2 * (24*e^8 + 556*e^6 + 875*e^4 - 346*e^2 -269) / (105 * e * (1-e)^7 * (1+e)^8 ) * ElliE + ...
        - (3072*e^6 + 48437*e^4 + 58838*e^2 + 10613) / (6720 * e * (1-e)^7 * (1+e)^6) * ElliF + ...
        (275*e^6 + 1671*e^4 + 1721 * e^2 + 429) / (64 * e * (1-e)^8  * (1+e)^6 ) * EllipticPi  + ...
        + sin(theta)  .* other67 .* sqrt(1+e^2+2*e*cos(theta)) ./ (13440 * (e^16 - 8*e^14 + 28*e^12 - 56*e^10 + 70*e^8 - 56*e^6 + 28*e^4 - 8*e^2 + 1) * (1+e*cos(theta)).^8 ) - ...
        (sin(theta0_2)  .* other67_0 .* sqrt(1+e^2+2*e*cos(theta0_2)) ./ (13440 * (e^16 - 8*e^14 + 28*e^12 - 56*e^10 + 70*e^8 - 56*e^6 + 28*e^4 - 8*e^2 + 1)  * (1+e*cos(theta0_2)).^8  )) ;
    
    % =========================================================================
    
else
    
    %% Idrag1
    
    IDrag1(1,:) = theta./2 - theta0_2./2 - sin(2*theta)./4 + sin(2*theta0_2)./4;
    IDrag1(2,:) = IDrag1(1,:);
    IDrag1(3,:) = IDrag1(1,:);
    IDrag1(4,:) = IDrag1(1,:);
    IDrag1(5,:) = IDrag1(1,:);
    IDrag1(6,:) = IDrag1(1,:);
    IDrag1(7,:) = IDrag1(1,:);
    IDrag1(8,:) = IDrag1(1,:);
    
    %% IDrag2
    
    IDrag2(1,:) = theta - theta0_2;
    IDrag2(2,:) = IDrag2(1,:);
    IDrag2(3,:) = IDrag2(1,:);
    IDrag2(4,:) = IDrag2(1,:);
    IDrag2(5,:) = IDrag2(1,:);
    IDrag2(6,:) = IDrag2(1,:);
    IDrag2(7,:) = IDrag2(1,:);
    IDrag2(8,:) = IDrag2(1,:);
    
    %% Idrag4
    
    IDrag4(1,:) = theta - theta0_2;
    IDrag4(2,:) = IDrag4(1,:);
    IDrag4(3,:) = IDrag4(1,:);
    IDrag4(4,:) = IDrag4(1,:);
    IDrag4(5,:) = IDrag4(1,:);
    IDrag4(6,:) = IDrag4(1,:);
    IDrag4(7,:) = IDrag4(1,:);
    IDrag4(8,:) = IDrag4(1,:);
    
    
    %% Idrag5
    
    IDrag5(1,:) = - cos(theta) + cos(theta0_2);
    IDrag5(2,:) = IDrag5(1,:);
    IDrag5(3,:) = IDrag5(1,:);
    IDrag5(4,:) = IDrag5(1,:);
    IDrag5(5,:) = IDrag5(1,:);
    IDrag5(6,:) = IDrag5(1,:);
    IDrag5(7,:) = IDrag5(1,:);
    IDrag5(8,:) = IDrag5(1,:);
    
    
    %% IDrag6
    
    IDrag6(1,:) = sin(theta) - sin(theta0_2);
    IDrag6(2,:) = IDrag6(1,:);
    IDrag6(3,:) = IDrag6(1,:);
    IDrag6(4,:) = IDrag6(1,:);
    IDrag6(5,:) = IDrag6(1,:);
    IDrag6(6,:) = IDrag6(1,:);
    IDrag6(7,:) = IDrag6(1,:);
    IDrag6(8,:) = IDrag6(1,:);
%     keyboard
    
end

